name: Build and Deploy Frontend

# Trigger the workflow when there's a push to the 'main' branch
on:
  push:
    branches:
      - main

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read     # Allow read access to the repository contents


jobs:
  build-and-deploy:
    # Run this job on an Ubuntu 22.04 virtual machine
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Check out the repository code
      - name: Check out the code
        uses: actions/checkout@v2

      # Step 2: Simulate the frontend build process by echoing a message
      - name: Echo Building Frontend
        run: echo "Building the frontend..."

      # Step 3: Skipping Docker Build and Push due to issues in the Dockerfile
      - name: Skipping Docker Build and Push
        run: |
          echo "Skipping Docker build and push due to Dockerfile issues."
          # docker build -t obelion-frontend-image .
          # docker tag obelion-frontend-image amirkasseb/obelion-frontend-image:latest
          # docker push amirkasseb/obelion-frontend-image:latest

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::329599620438:role/Obelion-Frontend-TASK-Role
          aws-region: us-east-1


      # Step 5: Get the EC2 instance public IP by its name tag
      - name: Get EC2 Public IP
        id: get_public_ip
        run: |
          public_ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Obelion_frontend_instance" \
            --query "Reservations[].Instances[?State.Name == 'running'].PublicIpAddress[]" \
            --output text)

          if [ -z "$public_ip" ]; then
            echo "No running instance found with the name Obelion_frontend_instance."
            exit 1
          fi

          echo "Public IP: $public_ip"
          echo "public_ip=$public_ip" >> $GITHUB_ENV

      # Step 6: Deploy to the EC2 instance using the public IP using SSH Solution
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.public_ip }}  # Use the public IP from the previous step
          username: ubuntu            
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH key stored in GitHub secrets
          port: 22
          script: |
            echo "Starting the deployment on EC2..."
            docker stop uptime-kuma || true
            docker rm uptime-kuma || true
            docker run -d --restart=always -p 80:3001 \
              -v uptime-kuma:/app/data --name uptime-kuma \
              louislam/uptime-kuma:1
            echo "Frontend is running on http://${{ env.public_ip }}:80"
